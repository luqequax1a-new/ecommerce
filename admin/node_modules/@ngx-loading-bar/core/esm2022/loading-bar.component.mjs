import { Component, Input, ViewEncapsulation, ChangeDetectionStrategy } from '@angular/core';
import { AsyncPipe, NgIf } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "./loading-bar.service";
export class NgxLoadingBar {
    get value$() {
        return this.ref ? this.loader.useRef(this.ref).value$ : this.loader.value$;
    }
    constructor(loader) {
        this.loader = loader;
        this.includeSpinner = true;
        this.includeBar = true;
        this.fixed = true;
        this.color = '#29d';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NgxLoadingBar, deps: [{ token: i1.LoadingBarService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: NgxLoadingBar, isStandalone: true, selector: "ngx-loading-bar", inputs: { includeSpinner: "includeSpinner", includeBar: "includeBar", fixed: "fixed", color: "color", value: "value", ref: "ref", height: "height", diameter: "diameter" }, host: { properties: { "attr.fixed": "fixed", "style.color": "color" } }, ngImport: i0, template: "<ng-container *ngIf=\"value != null ? value : (value$ | async) as progress\">\n  <div *ngIf=\"includeSpinner\" class=\"ngx-spinner\">\n    <div [style.width]=\"diameter\" [style.height]=\"diameter\" class=\"ngx-spinner-icon\"></div>\n  </div>\n  <div\n    *ngIf=\"includeBar\"\n    class=\"ngx-bar\"\n    [style.background]=\"color\"\n    [style.height]=\"height\"\n    [style.width]=\"progress + '%'\"\n  ></div>\n</ng-container>\n", styles: [":host{position:relative;display:block;pointer-events:none}:host .ngx-spinner{transition:.35s linear all;display:block;position:absolute;top:5px;left:0}:host .ngx-spinner .ngx-spinner-icon{width:14px;height:14px;border:solid 2px transparent;border-top-color:inherit;border-left-color:inherit;border-radius:50%;animation:loading-bar-spinner .4s linear infinite}:host .ngx-bar{transition:width .35s;position:absolute;top:0;left:0;width:100%;height:2px;border-bottom-right-radius:1px;border-top-right-radius:1px}[dir=rtl] :host .ngx-bar{right:0;left:unset}:host[fixed=true]{z-index:10002}:host[fixed=true] .ngx-bar{position:fixed}:host[fixed=true] .ngx-spinner{position:fixed;top:10px;left:10px}[dir=rtl] :host[fixed=true] .ngx-spinner{right:10px;left:unset}@keyframes loading-bar-spinner{0%{transform:rotate(0)}to{transform:rotate(360deg)}}\n"], dependencies: [{ kind: "pipe", type: AsyncPipe, name: "async" }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NgxLoadingBar, decorators: [{
            type: Component,
            args: [{ selector: 'ngx-loading-bar', standalone: true, imports: [AsyncPipe, NgIf], preserveWhitespaces: false, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.Emulated, host: {
                        '[attr.fixed]': 'fixed',
                        '[style.color]': 'color',
                    }, template: "<ng-container *ngIf=\"value != null ? value : (value$ | async) as progress\">\n  <div *ngIf=\"includeSpinner\" class=\"ngx-spinner\">\n    <div [style.width]=\"diameter\" [style.height]=\"diameter\" class=\"ngx-spinner-icon\"></div>\n  </div>\n  <div\n    *ngIf=\"includeBar\"\n    class=\"ngx-bar\"\n    [style.background]=\"color\"\n    [style.height]=\"height\"\n    [style.width]=\"progress + '%'\"\n  ></div>\n</ng-container>\n", styles: [":host{position:relative;display:block;pointer-events:none}:host .ngx-spinner{transition:.35s linear all;display:block;position:absolute;top:5px;left:0}:host .ngx-spinner .ngx-spinner-icon{width:14px;height:14px;border:solid 2px transparent;border-top-color:inherit;border-left-color:inherit;border-radius:50%;animation:loading-bar-spinner .4s linear infinite}:host .ngx-bar{transition:width .35s;position:absolute;top:0;left:0;width:100%;height:2px;border-bottom-right-radius:1px;border-top-right-radius:1px}[dir=rtl] :host .ngx-bar{right:0;left:unset}:host[fixed=true]{z-index:10002}:host[fixed=true] .ngx-bar{position:fixed}:host[fixed=true] .ngx-spinner{position:fixed;top:10px;left:10px}[dir=rtl] :host[fixed=true] .ngx-spinner{right:10px;left:unset}@keyframes loading-bar-spinner{0%{transform:rotate(0)}to{transform:rotate(360deg)}}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.LoadingBarService }]; }, propDecorators: { includeSpinner: [{
                type: Input
            }], includeBar: [{
                type: Input
            }], fixed: [{
                type: Input
            }], color: [{
                type: Input
            }], value: [{
                type: Input
            }], ref: [{
                type: Input
            }], height: [{
                type: Input
            }], diameter: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZGluZy1iYXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvbG9hZGluZy1iYXIuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvbG9hZGluZy1iYXIuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBYSxLQUFLLEVBQUUsaUJBQWlCLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFeEcsT0FBTyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7O0FBZ0JsRCxNQUFNLE9BQU8sYUFBYTtJQVV4QixJQUFJLE1BQU07UUFDUixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQzdFLENBQUM7SUFFRCxZQUFvQixNQUF5QjtRQUF6QixXQUFNLEdBQU4sTUFBTSxDQUFtQjtRQWJwQyxtQkFBYyxHQUFHLElBQUksQ0FBQztRQUN0QixlQUFVLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLFVBQUssR0FBRyxJQUFJLENBQUM7UUFDYixVQUFLLEdBQUcsTUFBTSxDQUFDO0lBVXdCLENBQUM7K0dBZHRDLGFBQWE7bUdBQWIsYUFBYSxnVUNsQjFCLGtiQVlBLDQzQkRMWSxTQUFTLDhDQUFFLElBQUk7OzRGQVdkLGFBQWE7a0JBZHpCLFNBQVM7K0JBQ0UsaUJBQWlCLGNBQ2YsSUFBSSxXQUNQLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyx1QkFDTCxLQUFLLG1CQUNULHVCQUF1QixDQUFDLE1BQU0saUJBQ2hDLGlCQUFpQixDQUFDLFFBQVEsUUFHbkM7d0JBQ0osY0FBYyxFQUFFLE9BQU87d0JBQ3ZCLGVBQWUsRUFBRSxPQUFPO3FCQUN6Qjt3R0FHUSxjQUFjO3NCQUF0QixLQUFLO2dCQUNHLFVBQVU7c0JBQWxCLEtBQUs7Z0JBQ0csS0FBSztzQkFBYixLQUFLO2dCQUNHLEtBQUs7c0JBQWIsS0FBSztnQkFDRyxLQUFLO3NCQUFiLEtBQUs7Z0JBQ0csR0FBRztzQkFBWCxLQUFLO2dCQUNHLE1BQU07c0JBQWQsS0FBSztnQkFDRyxRQUFRO3NCQUFoQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBEaXJlY3RpdmUsIElucHV0LCBWaWV3RW5jYXBzdWxhdGlvbiwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IExvYWRpbmdCYXJTZXJ2aWNlIH0gZnJvbSAnLi9sb2FkaW5nLWJhci5zZXJ2aWNlJztcbmltcG9ydCB7IEFzeW5jUGlwZSwgTmdJZiB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25neC1sb2FkaW5nLWJhcicsXG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIGltcG9ydHM6IFtBc3luY1BpcGUsIE5nSWZdLFxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLkVtdWxhdGVkLFxuICBzdHlsZVVybHM6IFsnLi9sb2FkaW5nLWJhci5jb21wb25lbnQuc2NzcyddLFxuICB0ZW1wbGF0ZVVybDogJy4vbG9hZGluZy1iYXIuY29tcG9uZW50Lmh0bWwnLFxuICBob3N0OiB7XG4gICAgJ1thdHRyLmZpeGVkXSc6ICdmaXhlZCcsXG4gICAgJ1tzdHlsZS5jb2xvcl0nOiAnY29sb3InLFxuICB9LFxufSlcbmV4cG9ydCBjbGFzcyBOZ3hMb2FkaW5nQmFyIHtcbiAgQElucHV0KCkgaW5jbHVkZVNwaW5uZXIgPSB0cnVlO1xuICBASW5wdXQoKSBpbmNsdWRlQmFyID0gdHJ1ZTtcbiAgQElucHV0KCkgZml4ZWQgPSB0cnVlO1xuICBASW5wdXQoKSBjb2xvciA9ICcjMjlkJztcbiAgQElucHV0KCkgdmFsdWU6IG51bWJlcjtcbiAgQElucHV0KCkgcmVmOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGhlaWdodDogc3RyaW5nO1xuICBASW5wdXQoKSBkaWFtZXRlcjogc3RyaW5nO1xuXG4gIGdldCB2YWx1ZSQoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVmID8gdGhpcy5sb2FkZXIudXNlUmVmKHRoaXMucmVmKS52YWx1ZSQgOiB0aGlzLmxvYWRlci52YWx1ZSQ7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGxvYWRlcjogTG9hZGluZ0JhclNlcnZpY2UpIHt9XG59XG4iLCI8bmctY29udGFpbmVyICpuZ0lmPVwidmFsdWUgIT0gbnVsbCA/IHZhbHVlIDogKHZhbHVlJCB8IGFzeW5jKSBhcyBwcm9ncmVzc1wiPlxuICA8ZGl2ICpuZ0lmPVwiaW5jbHVkZVNwaW5uZXJcIiBjbGFzcz1cIm5neC1zcGlubmVyXCI+XG4gICAgPGRpdiBbc3R5bGUud2lkdGhdPVwiZGlhbWV0ZXJcIiBbc3R5bGUuaGVpZ2h0XT1cImRpYW1ldGVyXCIgY2xhc3M9XCJuZ3gtc3Bpbm5lci1pY29uXCI+PC9kaXY+XG4gIDwvZGl2PlxuICA8ZGl2XG4gICAgKm5nSWY9XCJpbmNsdWRlQmFyXCJcbiAgICBjbGFzcz1cIm5neC1iYXJcIlxuICAgIFtzdHlsZS5iYWNrZ3JvdW5kXT1cImNvbG9yXCJcbiAgICBbc3R5bGUuaGVpZ2h0XT1cImhlaWdodFwiXG4gICAgW3N0eWxlLndpZHRoXT1cInByb2dyZXNzICsgJyUnXCJcbiAgPjwvZGl2PlxuPC9uZy1jb250YWluZXI+XG4iXX0=